---
title: Corpus
---

# The QuantGov Corpus

Within the QuantGov framework, a corpus refers to a set of documents and a
driver that is able to serve those documents, along with a unique index value.

## Basic Structure

A corpus represents a set of documents, and implements the corpus driver
interface. The root directory for a corpus should contain:

-   A `makefile` to manage the workflow of the corpus
-   A module named `driver.py` that implements the corpus driver interface (see
    below)
-   A subdirectory named `scripts` containing the scripts needed to obtain,
    organize, and prepare the documents that make up the corpus, as well as to
    generate any metadata for the corpus.
-   A subdirectory named `data` that holds any intermediate data generated
    during preparation of the corpus.

One file that each corpus should generate is a csv file in the `data` directory
named `metadata.csv`. This file should contain any additional information about
individual documents that may be relevant. For example, the `metadata.csv`
generated by the CFR corpus includes which agency and department authored each
individual CFR part, as well as the restriction and word count for each part.

## The Corpus Driver Interface

Each corpus should contain a python module named `driver.py`. This driver
serves two important functions. First it specifies how the corpus should be
indexed. An index is one or more values that, taken together, uniquely identify
each document in the corpus. An index can be as simple as an id number, or it
can be more descriptive. For the CFR corpus, each document, representing a
single subdivision called a part, is represented by three pieces of metadata:
the year of the CFR edition that contains it, the title that contains it, and
the part number.

The names of the components of the index are stored in a module-level constant
named `INDEX`, and are always a tuple, even when the index only has one
component. Thus, for the CFR, `INDEX = ('year', 'title', 'part')`, and for a
simple corpus using a document numbering system, `INDEX = ('id',)`.

The second important feature of the driver is that it provides a function named
`stream`. The `stream` function should return an
[iterable](https://docs.python.org/3/glossary.html#term-iterable)---in most
cases, a
[generator](https://docs.python.org/3/glossary.html#term-generator)---that
emits the index value (or values) and text of each document in the corpus.
Thus, the first item emitted by `driver.stream()` in the CFR corpus might be
`(1975, 1, 1), "Text of the 1975 CFR, Title 1, Part 1"`.

Drivers may implement other features (such as only streaming a subset of
documents based on the index), but these types of features are non-standard,
and estimators should not expect them as a matter of course.

## Corpus Metadata

Relevant metadata will vary from corpus to corpus. Metadata can be generated
from one of two sources: from the text itself, or from additional external
information. In the first case, the best practice is to write scripts that
understand the corpus driver interface, and can therefore be used in other
corpora. An example of this approach can be seen in the `get_wordcount.py` and
`get_restriction_count.py` in the QuantGov generic corpus. In the second case,
the external resources should be stored in a
[databank](http://docs.quantgov.org/databank) kept separate from the corpus
itself, which the corpus scripts treat as read-only. An example of this
approach is the agency attribution in the CFR corpus, which relies on a set of
documents separate from the main CFR text.

## Writing a new Corpus

The easiest way to write a new corpus is to fork the most similar official
corpus (see below) and modify it to represent the relevant body of text. There
are three principle problems to solve in the creation of a new corpus:

1.  How can the text be obtained and, if necessary, translated to plain text?
2.  What is the logical unit of analysis for the corpus?
3.  How can the text be organized to most usefully reflect the unit of
    analysis.

The first problem will determine the scripts needed for downloading or
otherwise obtaining and cleaning the text from its published format. The second
will determine the index for the corpus, and identify what makes an individual
document, appropriate to be served through the driver. The third will determine
how the driver is actually implemented.

## Official QuantGov Corpora

Official QuantGov corpora are branches of the corpus repository, available on
GitHub at <https://github.com/QuantGov/corpus>. The current official corpora
are listed on the QuantGov Platform page at <http://www.quantgov.org/platform>.

## Submitting a New Official Corpus

Complete corpora may be considered to be added as official QuantGov copora. If
accepted, a new branch will be created to which a pull request can be made.
Additions to the official corpora are at the sole discretion of the QuantGov
team. Please email info\@quantgov.org with any questions about adding a corpus
to the official QuantGov copora.
